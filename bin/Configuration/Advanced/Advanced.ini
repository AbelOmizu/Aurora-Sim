
; This is the AssetCache config.
; Recommended to use FlotSamCache
[Modules]
    
    ;AssetCaching = "GlynnTuckerAssetCache"
    
    AssetCaching = "FlotsamAssetCache"
    Include-FlotsamCache = "Configuration/Advanced/AssetCache/FlotsamCache.ini"
    AssetLoaderArgs = true

    ;AssetCaching = "CenomeMemoryAssetCache"
    ;Include-CenomeCache = "Configuration/Advanced/AssetCache/CenomeCache.ini"





[PacketPool]
    ; Enables the experimental packet pool. Yes, we've been here before.
    ;RecyclePackets = true;
    ;RecycleDataBlocks = true;


[InterestManagement]
     ; This section controls how state updates are prioritized for each client
     ; Valid values are Time, Distance, SimpleAngularDistance, and FrontBack
     UpdatePrioritizationScheme = FrontBack
     ReprioritizationEnabled = true
     ReprioritizationInterval = 2000.0
     RootReprioritizationDistance = 10.0
     ChildReprioritizationDistance = 20.0


[OpenGridProtocol]
    ;These are the settings for the Open Grid Protocol..  the Agent Domain, Region Domain,   you know..
    ;On/true or Off/false
    ogp_enabled=false

    ;Name Prefix/suffix when using OGP
    ogp_firstname_prefix=""
    ogp_lastname_suffix="_EXTERNAL"

[RemoteAdmin]
    enabled = false
    access_password = unknown

    ; set this variable to true if you want the create_region XmlRpc
    ; call to unconditionally enable voice on all parcels for a newly
    ; created region [default: false]

    create_region_enable_voice = false

    ; set this variable to false if you want the create_region XmlRpc
    ; call to create all regions as private per default (can be
    ; overridden in the XmlRpc call) [default: true]

    create_region_public = false


    ; the create_region XmlRpc call uses region_file_template to generate
    ; the file name of newly create regions (if they are created
    ; persistent). the parameter available are:
    ;     {0} - X location
    ;     {1} - Y location
    ;     {2} - region UUID
    ;     {3} - region port
    ;     {4} - region name with " ", ":", "/" mapped to  "_"

    region_file_template = "{0}x{1}-{2}.xml"

    ; we can limit the number of regions that XmlRpcCreateRegion will
    ; allow by setting this to a positive, non-0 number: as long as the
    ; number of regions is below region_limits, XmlRpcCreateRegion will
    ; succeed. setting region_limit to 0 disables the check.
    ; default is 0
    ;region_limit = 0

    ; enable only those methods you deem to be appropriate using a | delimited whitelist
    ; for example, enabled_methods = admin_broadcast|admin_region_query|admin_save_oar|admin_save_xml
    ; if this parameter is not specified but enabled = true, all methods will be available
    enabled_methods = all


[RestPlugins]
    ; Change this to true to enable REST Plugins. This must be true if you wish to use
    ; REST Region or REST Asset and Inventory Plugins
    enabled = false
    god_key = SECRET
    prefix = /admin


[RestRegionPlugin]
    ; Change this to true to enable the REST Region Plugin
    enabled = false


[RestHandler]
    ; Change this to true to enable the REST Asset and Inventory Plugin
    enabled = false
    authenticate = true
    secured = true
    extended-escape = true
    realm = OpenSim REST
    dump-asset = false
    path-fill = true
    dump-line-size = 32
    flush-on-error = true


[ClientStack.LindenUDP]
    ; Set this to true to process incoming packets asynchronously. Networking is
    ; already separated from packet handling with a queue, so this will only
    ; affect whether networking internals such as packet decoding and
    ; acknowledgement accounting are done synchronously or asynchronously
    ;
    ;async_packet_handling = false

    ; The client socket receive buffer size determines how many
    ; incoming requests we can process; the default on .NET is 8192
    ; which is about 2 4k-sized UDP datagrams. On mono this is
    ; whatever the underlying operating system has as default; for
    ; example, ubuntu 8.04 or SLES11 have about 111k, which is about
    ; 27 4k-sized UDP datagrams (on linux platforms you can [as root]
    ; do "sysctl net.core.rmem_default" to find out what your system
    ; uses a default socket receive buffer size.
    ;
    ; client_socket_rcvbuf_size allows you to specify the receive
    ; buffer size LLUDPServer should use. NOTE: this will be limited
    ; by the system's settings for the maximum client receive buffer
    ; size (on linux systems you can set that with "sysctl -w
    ; net.core.rmem_max=X")
    ;
    ;client_socket_rcvbuf_size = 8388608

    ; Maximum outbound bytes per second for a single scene. This can be used to
    ; throttle total outbound UDP traffic for a simulator. The default value is
    ; 0, meaning no throttling at the scene level. The example given here is
    ; 20 megabits
    ;
    ;scene_throttle_max_bps = 2621440

    ; Maximum bits per second to send to any single client. This will override
    ; the user's viewer preference settings. The default value is 0, meaning no
    ; aggregate throttling on clients (only per-category throttling). The
    ; example given here is 1.5 megabits
    ;
    ;client_throttle_max_bps = 196608

    ; Per-client bytes per second rates for the various throttle categories.
    ; These are default values that will be overriden by clients
    ;
    ;resend_default = 12500
    ;land_default = 1000
    ;wind_default = 1000
    ;cloud_default = 1000
    ;task_default = 1000
    ;texture_default = 1000
    ;asset_default = 1000
    ;state_default = 1000

    ; Per-client maximum burst rates in bytes per second for the various
    ; throttle categories. These are default values that will be overriden by
    ; clients
    ;
    ;resend_limit = 18750
    ;land_limit = 29750
    ;wind_limit = 18750
    ;cloud_limit = 18750
    ;task_limit = 18750
    ;texture_limit = 55750
    ;asset_limit = 27500
    ;state_limit = 37000

    ; Configures how ObjectUpdates are aggregated. These numbers
    ; do not literally mean how many updates will be put in each
    ; packet that goes over the wire, as packets are
    ; automatically split on a 1400 byte boundary. These control
    ; the balance between responsiveness of interest list updates
    ; and total throughput. Higher numbers will ensure more full-
    ; sized packets and faster sending of data, but more delay in
    ; updating interest lists
    ;
    ;PrimTerseUpdatesPerPacket = 25
    ;AvatarTerseUpdatesPerPacket = 10
    ;PrimFullUpdatesPerPacket = 100

    ; TextureSendLimit determines how many packets will be put on
    ; the outgoing queue each cycle. Like the settings above, this
    ; is a balance between responsiveness to priority updates and
    ; total throughput. Higher numbers will give a better
    ; throughput at the cost of reduced responsiveness to client
    ; priority changes or transfer aborts
    ;
    ;TextureSendLimit = 20