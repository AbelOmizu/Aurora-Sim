[AuroraDotNetEngine]
    Enabled = true

    ; Number of threads to use for script event execution
    ; Threads are shared across all regions
    NumberOfScriptThreads = 2

    ; Script event execution thread priority inside application.
    ; Valid values: Lowest, BelowNormal, Normal, AboveNormal, Highest
    ScriptThreadPriority=BelowNormal

    ; How long MAX should a script event be allowed to run (per event execution)?
    ; Do not set this too low (like 50ms) as there are some time wasted in simply executing a function
    ; There is also a small speed penalty for every kill that is made
    MaxEventExecutionTimeMs=500000

    ; Should we enable the max script event execution thread to look for scripts that exceed their timeslice?
    EnforceMaxEventExecutionTime=true

    ; Should we stop the script completely when time exceeds?
    ; This is useful if you have a high <MaxEventExecutionTimeMs> and want to deactivate scripts that go wrong
    ; Note that for example physics engine can slow down the system and make scripts spend more time
    DeactivateScriptOnTimeout=true

    ; If no scripts have executed in this pass how long should we sleep before checking again
    ; Impact:
    ; Too low and you will waste lots of CPU
    ; Too high and people touching object or similar will have to wait up to this amount of time before script responding
    SleepTimeIfNoScriptExecutionMs=25

    ; AppDomains are used for two things:
    ; * Security: Scripts inside AppDomains are limited in permissions.
    ; * Script unloading: When a script is deactivated it can not be unloaded. Only whole AppDomains can be unloaded.
    ;                     AppDomains are therefore only unloaded once ALL active scripts inside it has been deactivated (removed from prims).
    ; Each AppDomain has some memory overhead. But leaving dead scripts in memory also has memory overhead.
    ScriptsPerAppDomain=1

    ; MaintenanceLoop
    ; How often to run maintenance loop
    ; Maintenance loop is doing: script compile/load, script unload, reload config, adjust running config and enforce max execution time
    MaintenanceLoopms=1

    ; How many maintenanceloops between each of these.
    ; (if 2 then function will be executed every MaintenanceLoopms*2 ms)
    ; Script loading/unloading

    ; How long load/unload thread should sleep if there is nothing to do
    ; Higher value makes it respond slower when scripts are added/removed from prims
    ; But once active it will process all in queue before sleeping again
    MaintenanceLoopTicks_ScriptLoadUnload=1

    ; Allow the use of os* functions (some are dangerous)
    ; Default is false
    AllowOSFunctions = true

    ; Maximum number of items in load/unload queue before we start rejecting loads
    ; Note that we will only be rejecting load. Unloads will still be able to queue.

    LoadUnloadMaxQueueSize=100000

    ; Maximum number of (LSL) events that can be queued before new events are ignored.
    EventExecutionMaxQueueSize=100000

    ; The amount of time the script engine sleeps before executing loops. The higher, the slower script loading; the lower, the more CPU wasted.
	SleepTimeBetweenLoops = 250

    ; Async LL command sleep
    ; If no async LL commands are waiting, how long should thread sleep before checking again
    ; Async LL commands are LSL-commands that causes an event to be fired back with result
    ; currently unused
    ; AsyncLLCommandLoopms=50

    ; When script is converted from LSL to C#, or just plain compiled, a copy of the script source will be put in the ScriptEngine folder
    WriteScriptSourceToDebugFile=false

    ; Specify default script compiler
    ; If you do not specify //cs, //vb, //js or //lsl tag as the first characters of your script then the default compiler will be chosen
    ; Valid languages are: lsl, cs, js and vb
    DefaultCompileLanguage=lsl

    ; Specify what compilers are allowed to be used
    ; Note vb only works on Windows for now (Mono lacks VB compile support)
    ; Valid languages are: lsl, cs, js and vb
    ; AllowedCompilers=lsl,cs,js,vb.  *warning*, non lsl languages have access to static methods such as System.IO.File.  Enable at your own risk.
    AllowedCompilers=lsl

    ; Compile scripts with debugging
    ; Probably a thousand times slower, but gives you a line number when something goes wrong.
    CompileWithDebugInformation=true

    ; The level of permissions to use. Recommended: Internet
    ; Valid values are:
    ; *  FullTrust
    ; *  SkipVerification
    ; *  Execution
    ; *  Nothing
    ; *  LocalIntranet
    ; *  Internet
    ; *  Everything
    AppDomainPermissions = "FullTrust"


    ;;; Script Specific Config, Includes: Timer, OSSL, Script Delays, Sensor reading, notecard line maximum.
    MinTimerInterval = 0.01

    ; Sets the multiplier for the scripting delays
    ScriptDelayFactor = 1.0

    ; The factor the 10 m distances llimits are multiplied by
    ScriptDistanceLimitFactor = 1.0

    ; Maximum length of notecard line read
    ; Increasing this to large values potentially opens
    ; up the system to malicious scripters
    ; NotecardLineReadCharsMax = 255

    ; Sensor settings
    SensorMaxRange = 96.0
    SensorMaxResults = 16

    ; Allow for llCreateLink and llBreakLink to work without asking for permission
    ; only enable this in a trusted environment otherwise you may be subject to hijacking
    ; AutomaticLinkPermission = false

    ; Disable underground movement of prims (default true); set to
    ; false to allow script controlled underground positioning of
    ; prims
    ; DisableUndergroundMovement = true

	; Change to false if you would like to block llRezObject (for griefing purposes, this might be a good idea)
	AllowllRezObject = true

	; MacroScripting Section

	AllowMacroScripting = true

	; This just sets how much a script is able to access other scripts.
	; Values are:
	; Low - Only allows for scripts in the same object to be accessed
	; Medium - Allows for accessing of scripts in the same object or from a URL.
	; Full - Allows for accessing of scripts from ANY objects in the sim or 	from a URL.
	MacroScriptingTrustLevel = Medium


	; This sets the APIs that are allowed.
	; Values:
	;   AA: Aurora functions
	;   OSSL: OSSL functions
	;   LSL: LSL functions
	;   CM: CareMinster functions
	AllowedAPIs = AA,OSSL,LSL,CM

	; Functions enable/disable
      ; For each function, you can add one line, as shown
      ; The default for all functions allows them if below threat level

    	; true allows the use of the function unconditionally
    	; Allow_osSetRegionWaterHeight = true

    	; false disables the function completely
    	; Allow_osSetRegionWaterHeight = false

    	; Comma separated list of UUIDS allows the function for that list of UUIDS
    	; Allow_osSetRegionWaterHeight = 888760cb-a3cf-43ac-8ea4-8732fd3ee2bb

     ; Threat level to allow if os functions are enabled
    ; One of None, VeryLow, Low, Moderate, High, VeryHigh, Severe
    ; Default is VeryLow
    FunctionThreatLevel = Severe


[MRM]
    ; Enables the Mini Region Modules Script Engine.
    ; default is false
    Enabled = false

    ; Runs MRM in a Security Sandbox
    ; WARNING: DISABLING IS A SECURITY RISK.
    Sandboxed = true

    ; The level sandbox to use, adjust at your OWN RISK.
    ; Valid values are:
    ; *  FullTrust
    ; *  SkipVerification
    ; *  Execution
    ; *  Nothing
    ; *  LocalIntranet
    ; *  Internet
    ; *  Everything
    SandboxLevel = "Internet"

    ; Only allow Region Owners to run MRMs
    ; May represent a security risk if you disable this.
    OwnerOnly = true

[VectorRender]

    ; the font to use for rendering text (default: Arial)
    ; font_name = "Arial"


[LL-Functions]
    ; Set the following to true to allow administrator owned scripts to execute console commands
    ; currently unused
    ; AllowosConsoleCommand=false

    AllowGodFunctions = false

    ; Maximum number of llListen events we allow per script
    ; Set this to 0 to have no limit imposed.
    max_listens_per_script = 64

